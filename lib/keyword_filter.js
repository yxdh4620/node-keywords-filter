// Generated by CoffeeScript 1.8.0
(function() {
  var IS_CHANGE, NodeTree, change_case, infor, position, replaceIndexChar, replaceIndexStr, rollback, rootNode, subNode, tempNode, _;

  _ = require("underscore");

  NodeTree = require("./module/node_tree");

  infor = require("./data/information");

  change_case = require("./util/change_case");

  rootNode = NodeTree.getInstance();

  IS_CHANGE = true;

  tempNode = null;

  subNode = null;

  rollback = 0;

  position = 0;

  replaceIndexChar = function(str, index, char) {
    if (index < 0 || index + 1 > str.length) {
      return str;
    }
    return str.substring(0, index) + char + str.substring(index + 1, str.length);
  };

  replaceIndexStr = function(str, start, end, scdStr) {
    var endStr, firstStr;
    firstStr = str.substring(0, start);
    endStr = str.substring(end, str.length);
    return "" + firstStr + scdStr + endStr;
  };

  module.exports = {
    init: function(keyArray, isChange) {
      if (isChange == null) {
        isChange = true;
      }
      infor.initData(keyArray);
      this.createNodeTree(isChange);
    },
    createNodeTree: function(isChange) {
      var char, i, j, key, keyArray, _i, _j, _len, _len1;
      if (isChange == null) {
        isChange = true;
      }
      console.log("[createNodeTree start]");
      IS_CHANGE = isChange;
      keyArray = infor.getKeyArray();
      for (i = _i = 0, _len = keyArray.length; _i < _len; i = ++_i) {
        key = keyArray[i];
        if (isChange) {
          key = change_case.change(key);
        }
        tempNode = rootNode;
        for (j = _j = 0, _len1 = key.length; _j < _len1; j = ++_j) {
          char = key[j];
          subNode = tempNode.getNode(char);
          if (subNode === void 0) {
            subNode = NodeTree.getInstance();
            tempNode.setNode(char, subNode);
          }
          tempNode = subNode;
          if (j === key.length - 1) {
            subNode.setEnd(true);
          }
        }
      }
    },
    isContainKeyword: function(str, isChange) {
      var char;
      tempNode = rootNode;
      rollback = 0;
      position = 0;
      if (isChange == null) {
        isChange = IS_CHANGE;
      }
      if (isChange) {
        str = change_case.change(str);
      }
      while (position < str.length) {
        char = str.charAt(position);
        tempNode = tempNode.getNode(char);
        if (tempNode === void 0) {
          position = position - rollback;
          rollback = 0;
          tempNode = rootNode;
        } else if (tempNode.isEnd()) {
          return true;
        } else {
          rollback++;
        }
        position++;
      }
      return false;
    },
    replaceKeyword: function(str, isChange, reChar) {
      var i, _i, _ref, _ref1;
      if (isChange == null) {
        isChange = true;
      }
      if (reChar == null) {
        reChar = '*';
      }
      tempNode = rootNode;
      rollback = 0;
      position = 0;
      if (_.isString(isChange)) {
        reChar = isChange;
        isChange = IS_CHANGE;
      }
      if (isChange) {
        str = change_case.change(str);
      }
      while (position < str.length) {
        tempNode = tempNode.getNode(str.charAt(position));
        if (tempNode === void 0) {
          position = position - rollback;
          rollback = 0;
          tempNode = rootNode;
        } else if (tempNode.isEnd()) {
          for (i = _i = _ref = position - rollback, _ref1 = position + 1; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
            str = replaceIndexChar(str, i, reChar);
          }
          rollback = 1;
        } else {
          rollback++;
        }
        position++;
      }
      return str;
    },
    replaceStrKeyword: function(str, isChange, reStr) {
      var end, filter, filters, isEnd, len, start, work;
      if (isChange == null) {
        isChange = true;
      }
      if (reStr == null) {
        reStr = '敏感词';
      }
      tempNode = rootNode;
      start = 0;
      end = 0;
      len = 0;
      isEnd = false;
      if (_.isString(isChange)) {
        reStr = isChange;
        isChange = IS_CHANGE;
      }
      if (isChange) {
        str = change_case.change(str);
      }
      filters = [];
      while (start + len < str.length) {
        tempNode = tempNode.getNode(str.charAt(start + len));
        if (tempNode === void 0) {
          if (isEnd) {
            filters.push([start, start + len]);
            start = start + len;
          } else {
            start++;
          }
          isEnd = false;
          len = 0;
          tempNode = rootNode;
        } else if (tempNode.isEnd()) {
          isEnd = true;
          len++;
        } else {
          len++;
        }
      }
      if (isEnd) {
        filters.push([start, start + len]);
      }
      filter = null;
      while (filters.length > 0) {
        work = filters.pop();
        str = replaceIndexStr(str, work[0], work[1], reStr);
      }
      return str;
    },
    calcCount: function(str, isChange) {
      var end, i, isEnd, len, start;
      tempNode = rootNode;
      start = 0;
      end = 0;
      len = 0;
      isEnd = false;
      if (isChange == null) {
        isChange = IS_CHANGE;
      }
      if (isChange) {
        str = change_case.change(str);
      }
      i = 0;
      while (start + len < str.length) {
        tempNode = tempNode.getNode(str.charAt(start + len));
        if (tempNode === void 0) {
          if (isEnd) {
            start = start + len;
            i++;
          } else {
            start++;
          }
          isEnd = false;
          len = 0;
          tempNode = rootNode;
        } else if (tempNode.isEnd()) {
          isEnd = true;
          len++;
        } else {
          len++;
        }
      }
      if (isEnd) {
        i++;
      }
      return i;
    }
  };

}).call(this);
