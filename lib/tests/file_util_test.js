// Generated by CoffeeScript 1.8.0

/*
 * test for file_util
 */

(function() {
  var crypto, debuglog, file_util, fs, should;

  should = require("should");

  file_util = require("../utils/file_util");

  fs = require('fs');

  crypto = require('crypto');

  debuglog = require("debug")("gama-www::test::file_util_test");

  describe("test file_util", function() {
    before(function() {});
    describe("checksum", function() {
      it("should generate correct sum", function(done) {
        var originSum, pathToFile, sampleContent;
        sampleContent = "just some sample conent";
        pathToFile = "/tmp/" + (Date.now());
        fs.writeFileSync(pathToFile, sampleContent);
        originSum = crypto.createHash('md5').update(sampleContent).digest('hex');
        return file_util.checksum(pathToFile, function(err, sum) {
          console.log("[file_util_test] err:" + err + ", sum:" + sum);
          should.not.exist(err);
          sum.should.eql(originSum);
          return done();
        });
      });
      it("should return error message when file not exist", function(done) {
        return file_util.checksum("" + (Date.now()) + "_not_even_exist_" + (Date.now()), function(err, sum) {
          console.log("[file_util_test] err:" + err + ", sum:" + sum);
          should.exist(err);
          should.not.exist(sum);
          return done();
        });
      });
      return it("should return error message when path isn't a file", function(done) {
        return file_util.checksum("/tmp", function(err, sum) {
          console.log("[file_util_test] err:" + err + ", sum:" + sum);
          should.exist(err);
          should.not.exist(sum);
          return done();
        });
      });
    });
    return describe("writeToTemp ", function() {
      return it("should work", function(done) {
        var content;
        content = "good-day";
        return file_util.writeToTemp(content, function(err, pathToFile) {
          debuglog("[writeToTemp] pathToFile:" + pathToFile);
          fs.readFileSync(pathToFile, {
            encoding: "utf8"
          }).should.eql(content);
          done();
        });
      });
    });
  });

}).call(this);
